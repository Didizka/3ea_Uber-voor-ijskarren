// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using WebApi.Data;
using WebApi.Models;

namespace WebApi.Data.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20171026112651_UserInitialize")]
    partial class UserInitialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApi.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StreetName")
                        .HasMaxLength(50);

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(10);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(6);

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("WebApi.Models.ContactInformation", b =>
                {
                    b.Property<int>("ContactInformationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13);

                    b.HasKey("ContactInformationID");

                    b.HasIndex("AddressID");

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactInformationID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int?>("UserRoleID");

                    b.HasKey("UserID");

                    b.HasIndex("ContactInformationID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserRoleType");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WebApi.Models.Customer", b =>
                {
                    b.HasBaseType("WebApi.Models.User");


                    b.ToTable("Customers");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("WebApi.Models.Driver", b =>
                {
                    b.HasBaseType("WebApi.Models.User");

                    b.Property<bool>("IsApproved");

                    b.ToTable("Drivers");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("WebApi.Models.ContactInformation", b =>
                {
                    b.HasOne("WebApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.HasOne("WebApi.Models.ContactInformation", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationID");

                    b.HasOne("WebApi.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleID");
                });
#pragma warning restore 612, 618
        }
    }
}
